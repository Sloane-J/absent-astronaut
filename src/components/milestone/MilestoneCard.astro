---
import type { Milestone } from '../../types/milestone';
import ProgressBar from './ProgressBar.astro';

interface Props {
  milestone: Milestone;
  roadmapId: string;
}

const { milestone, roadmapId } = Astro.props;

const statusColors = {
  'completed': 'bg-green-500/20 text-green-400',
  'in-progress': 'bg-yellow-500/20 text-yellow-400',
  'overdue': 'bg-red-500/20 text-red-400',
  'not-started': 'bg-gray-500/20 text-gray-400'
};
---

<div class="bg-gray-800 rounded-lg p-4 hover:bg-gray-700 transition-colors">
  <div class="flex justify-between items-start mb-2">
    <h3 class="text-lg font-semibold text-white">{milestone.title}</h3>
    <span class={`px-2 py-1 text-sm rounded-full ${statusColors[milestone.status]}`}>
      {milestone.status}
    </span>
  </div>
  
  <p class="text-gray-400 text-sm mb-4">{milestone.description}</p>
  
  <div class="grid grid-cols-2 gap-4 text-sm text-gray-300 mb-4">
    <div class="flex items-center gap-2">
      <span>ðŸŽ¯ Due: {new Date(milestone.dueDate).toLocaleDateString()}</span>
    </div>
    <div class="flex items-center gap-2">
      <span>âš¡ Priority: {milestone.priority}</span>
    </div>
  </div>

  <div class="space-y-2">
    <div class="flex justify-between text-sm text-gray-400">
      <span>Progress</span>
      <span>{milestone.progress}%</span>
    </div>
    <ProgressBar progress={milestone.progress} />
  </div>

  <div class="flex justify-end gap-2 mt-4">
    <a
      href={`/roadmap/${roadmapId}/milestones/${milestone.id}/edit`}
      class="px-3 py-1 text-sm bg-blue-500/20 text-blue-400 rounded hover:bg-blue-500/30"
    >
      Edit
    </a>
    <button
      data-milestone-id={milestone.id}
      class="delete-milestone px-3 py-1 text-sm bg-red-500/20 text-red-400 rounded hover:bg-red-500/30"
    >
      Delete
    </button>
  </div>
</div>

<script>
  import { milestoneStorage } from '../../utils/milestoneStorage';
  import type { Milestone } from '../../types/milestone';

  interface DeleteEvent extends Event {
    target: HTMLButtonElement;
  }

  function handleDelete(event: DeleteEvent) {
    const button = event.target;
    const milestoneId = button.dataset.milestoneId;
    
    if (!milestoneId) {
      console.error('No milestone ID found');
      return;
    }

    if (confirm('Are you sure you want to delete this milestone?')) {
      try {
        const pathParts = window.location.pathname.split('/');
        const roadmapId = pathParts[2];
        
        if (!roadmapId) {
          throw new Error('No roadmap ID found in URL');
        }

        milestoneStorage.deleteMilestone(roadmapId, milestoneId);
        window.location.reload();
      } catch (error) {
        console.error('Error deleting milestone:', error);
        alert('Failed to delete milestone. Please try again.');
      }
    }
  }

  document.querySelectorAll('.delete-milestone').forEach(button => {
    button.addEventListener('click', handleDelete as EventListener);
  });
</script>