---
import Layout from '../../layouts/Layout.astro';

interface Concept {
  title: string;
}

interface Schedule {
  lessonDuration: number;
  breakDuration: number;
  availableDays: string[];
}

interface Roadmap {
  id: string;
  title: string;
  description: string;
  category: string;
  targetDate: string;
  learningMethod: string;
  concepts: Concept[];
  schedule: Schedule;
  resources?: string;
  status?: string;
  createdAt: string;
}
---

<Layout title="View Roadmaps">
  <main class="container mx-auto px-4 py-16">
    <div class="bg-gray-800 rounded-lg p-6 mt-8">
      <h1 class="text-2xl font-bold text-gray-100 mb-6">Your Roadmaps</h1>
      
      <div id="roadmaps-list" class="grid gap-6 grid-cols-1 lg:grid-cols-2">
        <div id="loading" class="col-span-full text-center text-gray-400 py-8">Loading roadmaps...</div>
      </div>
    </div>
  </main>
</Layout>

<script>
  interface Concept {
    title: string;
  }

  interface Schedule {
    lessonDuration: number;
    breakDuration: number;
    availableDays: string[];
  }

  interface Roadmap {
    id: string;
    title: string;
    description: string;
    category: string;
    targetDate: string;
    learningMethod: string;
    concepts: Concept[];
    schedule: Schedule;
    resources?: string;
    status?: string;
    createdAt: string;
  }

  const roadmapsContainer = document.getElementById('roadmaps-list');
  const loadingElement = document.getElementById('loading');
  const storedRoadmaps = localStorage.getItem('roadmaps');

  function isValidRoadmap(roadmap: any): roadmap is Roadmap {
    return (
      roadmap &&
      typeof roadmap.title === 'string' &&
      typeof roadmap.description === 'string' &&
      roadmap.schedule &&
      typeof Number(roadmap.schedule.lessonDuration) === 'number' &&
      !isNaN(Number(roadmap.schedule.lessonDuration)) &&
      typeof Number(roadmap.schedule.breakDuration) === 'number' &&
      !isNaN(Number(roadmap.schedule.breakDuration))
    );
  }

  function renderRoadmap(roadmap: Roadmap) {
    const lessonDuration = Number(roadmap.schedule.lessonDuration);
    const breakDuration = Number(roadmap.schedule.breakDuration);

    const roadmapElement = document.createElement('div');
    roadmapElement.className = 'bg-gray-700 rounded-lg p-6 hover:bg-gray-600 transition-colors';
    roadmapElement.innerHTML = `
      <div class="flex justify-between items-start mb-4">
        <div>
          <span class="text-sm font-medium text-blue-400">${roadmap.category || 'Uncategorized'}</span>
          <h2 class="text-xl text-gray-100 font-bold">${roadmap.title}</h2>
        </div>
        <span class="px-2 py-1 text-sm rounded ${
          roadmap.status === 'completed' ? 'bg-green-500/20 text-green-400' :
          roadmap.status === 'in-progress' ? 'bg-yellow-500/20 text-yellow-400' :
          'bg-gray-500/20 text-gray-400'
        }">${roadmap.status || 'Not Started'}</span>
      </div>
      
      <p class="text-gray-400 mb-4">${roadmap.description}</p>
      
      <div class="space-y-4 border-t border-gray-600 pt-4">
        <!-- Learning Method & Target Date -->
        <div class="grid grid-cols-2 gap-4 text-sm text-gray-300">
          <div>
            <span class="flex items-center gap-2">
              üìö Method: ${roadmap.learningMethod || 'Not specified'}
            </span>
          </div>
          <div>
            <span class="flex items-center gap-2">
              üéØ Target: ${roadmap.targetDate ? new Date(roadmap.targetDate).toLocaleDateString() : 'Not set'}
            </span>
          </div>
        </div>

        <!-- Time Management -->
        <div class="grid grid-cols-2 gap-4 text-sm text-gray-300">
          <div>
            <span class="flex items-center gap-2">
              ‚è±Ô∏è Lesson: ${lessonDuration}min
            </span>
          </div>
          <div>
            <span class="flex items-center gap-2">
              ‚åõ Break: ${breakDuration}min
            </span>
          </div>
        </div>

        ${roadmap.concepts?.length ? `
          <div class="text-sm text-gray-300">
            <span class="flex items-center gap-2 mb-2">
              üß† Key Concepts (${roadmap.concepts.length}):
            </span>
            <div class="flex flex-wrap gap-2">
              ${roadmap.concepts.map((concept: Concept) => `
                <span class="px-2 py-1 bg-gray-600 rounded-full text-xs">
                  ${concept.title}
                </span>
              `).join('')}
            </div>
          </div>
        ` : ''}

        ${roadmap.schedule.availableDays?.length ? `
          <div class="text-sm text-gray-300">
            <span class="flex items-center gap-2 mb-2">
              üìÖ Available Days:
            </span>
            <div class="flex gap-2">
              ${roadmap.schedule.availableDays.map((day: string) => `
                <span class="px-2 py-1 bg-blue-500/20 text-blue-400 rounded-full text-xs">
                  ${day}
                </span>
              `).join('')}
            </div>
          </div>
        ` : ''}

        ${roadmap.resources ? `
          <div class="text-sm text-gray-300 border-t border-gray-600 pt-4">
            <span class="flex items-center gap-2 mb-2">
              üìñ Resources:
            </span>
            <p class="text-gray-400">${roadmap.resources}</p>
          </div>
        ` : ''}

        <!-- Footer -->
        <div class="flex justify-between items-center text-xs text-gray-400 border-t border-gray-600 pt-4 mt-4">
          <span>Created: ${new Date(roadmap.createdAt).toLocaleDateString()}</span>
          <div class="flex gap-2">
            <button 
              onclick="editRoadmap('${roadmap.id}')" 
              class="px-3 py-1 bg-blue-500/20 text-blue-400 rounded-md hover:bg-blue-500/30"
            >
              Edit
            </button>
            <button 
              onclick="deleteRoadmap('${roadmap.id}')" 
              class="px-3 py-1 bg-red-500/20 text-red-400 rounded-md hover:bg-red-500/30"
            >
              Delete
            </button>
          </div>
        </div>
      </div>
    `;
    roadmapsContainer?.appendChild(roadmapElement);
  }

  function editRoadmap(id: string) {
    window.location.href = `/roadmap/edit/${id}`;
  }

  function deleteRoadmap(id: string) {
    if (confirm('Are you sure you want to delete this roadmap?')) {
      const roadmaps = JSON.parse(localStorage.getItem('roadmaps') || '[]');
      const updatedRoadmaps = roadmaps.filter((r: Roadmap) => r.id !== id);
      localStorage.setItem('roadmaps', JSON.stringify(updatedRoadmaps));
      window.location.reload();
    }
  }

  function showEmptyState() {
    loadingElement?.remove();
    const emptyMessage = document.createElement('div');
    emptyMessage.className = 'col-span-full text-center text-gray-400 py-8';
    emptyMessage.textContent = 'No roadmaps created yet. Create your first roadmap to get started!';
    roadmapsContainer?.appendChild(emptyMessage);
  }

  function showError() {
    loadingElement?.remove();
    const errorMessage = document.createElement('div');
    errorMessage.className = 'col-span-full text-center text-red-400 py-8';
    errorMessage.textContent = 'Error loading roadmaps. Please try again.';
    roadmapsContainer?.appendChild(errorMessage);
  }

  try {
    if (storedRoadmaps) {
      const roadmaps = JSON.parse(storedRoadmaps);
      loadingElement?.remove();
      
      if (roadmaps.length === 0) {
        showEmptyState();
      } else {
        roadmaps.forEach((roadmap: any) => {
          if (isValidRoadmap(roadmap)) {
            renderRoadmap(roadmap);
          } else {
            console.error('Invalid roadmap data:', roadmap);
          }
        });
      }
    } else {
      showEmptyState();
    }
  } catch (error) {
    console.error('Error:', error);
    showError();
  }
</script>