---
import DashboardLayout from '../layouts/DashboardLayout.astro';
---

<DashboardLayout title="Settings">
  <div class="max-w-3xl mx-auto">
    <h1 class="text-2xl font-bold text-gray-100 mb-8">Settings</h1>

    <div class="space-y-6">
      <!-- Theme Settings -->
      <div class="bg-gray-800/50 rounded-lg p-6">
        <h2 class="text-lg font-medium text-gray-100 mb-4">Appearance</h2>
        <div class="flex items-center justify-between">
          <span class="text-gray-300">Dark Mode</span>
          <button 
            id="theme-toggle"
            class="px-3 py-2 rounded-lg bg-gray-700 text-gray-300 hover:bg-gray-600"
          >
            Always Dark
          </button>
        </div>
      </div>

      <!-- Data Management -->
      <div class="bg-gray-800/50 rounded-lg p-6">
        <h2 class="text-lg font-medium text-gray-100 mb-4">Data Management</h2>
        <div class="space-y-4">
          <div class="flex items-center justify-between">
            <span class="text-gray-300">Export Data</span>
            <button 
              id="export-data"
              class="px-3 py-2 rounded-lg bg-blue-500 text-white hover:bg-blue-600"
            >
              Export
            </button>
          </div>
          <div class="flex items-center justify-between">
            <span class="text-gray-300">Import Data</span>
            <input
              type="file"
              id="import-data"
              accept=".json"
              class="hidden"
            />
            <button 
              id="import-trigger"
              class="px-3 py-2 rounded-lg bg-blue-500 text-white hover:bg-blue-600"
            >
              Import
            </button>
          </div>
        </div>
      </div>

      <!-- Danger Zone -->
      <div class="bg-red-900/20 rounded-lg p-6">
        <h2 class="text-lg font-medium text-red-400 mb-4">Danger Zone</h2>
        <div class="flex items-center justify-between">
          <div>
            <span class="text-gray-300">Clear All Data</span>
            <p class="text-sm text-gray-400">This action cannot be undone.</p>
          </div>
          <button 
            id="clear-data"
            class="px-3 py-2 rounded-lg bg-red-500 text-white hover:bg-red-600"
          >
            Clear Data
          </button>
        </div>
      </div>
    </div>
  </div>
  
<!-- Add Modal HTML at the end of the main content, before scripts -->
<div id="confirmModal" class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center">
  <div class="bg-gray-800 rounded-lg p-6 max-w-md w-full mx-4">
    <h3 class="text-xl font-medium text-red-400 mb-4">Confirm Deletion</h3>
    <p class="text-gray-300 mb-6">Are you sure you want to clear all data? This action cannot be undone.</p>
    <div class="flex justify-end space-x-4">
      <button id="cancelDelete" class="px-4 py-2 rounded-lg bg-gray-600 text-white hover:bg-gray-700">
        Cancel
      </button>
      <button id="confirmDelete" class="px-4 py-2 rounded-lg bg-red-500 text-white hover:bg-red-600">
        Delete
      </button>
    </div>
  </div>
</div>

<script>
  const modal = document.getElementById('confirmModal');
  const clearBtn = document.getElementById('clear-data');
  const cancelBtn = document.getElementById('cancelDelete');
  const confirmBtn = document.getElementById('confirmDelete');

  clearBtn?.addEventListener('click', () => {
    modal?.classList.remove('hidden');
    modal?.classList.add('flex');
  });

  cancelBtn?.addEventListener('click', () => {
    modal?.classList.add('hidden');
    modal?.classList.remove('flex');
  });

  confirmBtn?.addEventListener('click', () => {
    localStorage.clear();
    modal?.classList.add('hidden');
    modal?.classList.remove('flex');
    // Optional: Show success message
    alert('All data has been cleared successfully');
    window.location.reload();
  });

</script>
</DashboardLayout>

<script>
  // Data Export
  document.getElementById('export-data')?.addEventListener('click', () => {
    const data = localStorage.getItem('roadmaps');
    const blob = new Blob([data || '[]'], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `milestone-backup-${new Date().toISOString().split('T')[0]}.json`;
    a.click();
  });

  // Data Import
  document.getElementById('import-trigger')?.addEventListener('click', () => {
    document.getElementById('import-data')?.click();
  });

  document.getElementById('import-data')?.addEventListener('change', (e) => {
    const file = (e.target as HTMLInputElement).files?.[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = (e) => {
        try {
          JSON.parse(e.target?.result as string);
          localStorage.setItem('roadmaps', e.target?.result as string);
          alert('Data imported successfully!');
        } catch {
          alert('Invalid file format');
        }
      };
      reader.readAsText(file);
    }
  });

  /* Clear Data
  document.getElementById('clear-data')?.addEventListener('click', () => {
    if (confirm('Are you sure? This will delete all your roadmaps and cannot be undone.')) {
      localStorage.clear();
      alert('All data has been cleared');
    }
  });*/
</script>